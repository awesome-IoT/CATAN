#!/usr/bin/env python
"""
    DNS Intercept Service - Enables our nodes to redirect all queries to our survivor application.

    Reference: http://code.activestate.com/recipes/491264-mini-fake-dns-server/
    (Licensed under Python Source Foundation License)

    (c) 2015 Massachusetts Institute of Technology
"""
# Native
import os
import socket
import sys
import multiprocessing
import time
import logging
logger = logging.getLogger(__name__)

# CATAN
import catan.globals as G
import catan.utils as utils

DNS_PORT = 53
BIND_SLEEP = 30 # seconds

class DNSQuery:
    """
        DNS query class to craft our response.
    """
    def __init__(self, data):
        self.data=data
        self.domain=''
        
        type = (ord(data[2]) >> 3) & 15   # Opcode bits
        if type == 0:                     # Standard query
            ini=12
            lon=ord(data[ini])
            while lon != 0:
                self.domain+=data[ini+1:ini+lon+1]+'.'
                ini+=lon+1
                lon=ord(data[ini])

    def response(self, ip):
        packet=''
        if self.domain:
            packet+=self.data[:2] + "\x81\x80"
            packet+=self.data[4:6] + self.data[4:6] + '\x00\x00\x00\x00'   # Questions and Answers Counts
            packet+=self.data[12:]                                         # Original Domain Name Question
            packet+='\xc0\x0c'                                             # Pointer to domain name
            packet+='\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04'             # Response type, ttl and resource data length -> 4 bytes
            packet+=str.join('',map(lambda x: chr(int(x)), ip.split('.'))) # 4bytes of IP
        return packet


class DNSServer(multiprocessing.Process):
    
    def __init__(self, ip_address):
        """
            Initialize our DNS Server
            
            @param ip_address:  Address to run our DNS server on. 
        """
        self.ip_address = ip_address
       
        multiprocessing.Process.__init__(self)
        
    def run(self):
        """
            Open our listening socket
        """
        logger.info("Starting CATAN DNS Server...")
        while True:
            try:
                udps = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                udps.bind((self.ip_address,DNS_PORT))
            except:
                logger.error("Could not bind %s:%d.  (Are you root?)"%(
                                                            self.ip_address,
                                                            DNS_PORT))
                
                time.sleep(BIND_SLEEP)
                continue
            
            while True:
                # Get our raw data
                data, addr = udps.recvfrom(1024)
                # Process the DNS Query
                p=DNSQuery(data)
                
                logger.info("Got request for '%s'"%p.domain)
                
                # resolve everything to us!
                udps.sendto(p.response(self.ip_address), addr)

if __name__=="__main__":
    
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--dns_ip_addr", type=int, default='',
                        help="IP Address to bind our DNS server too. (Default: All)")
    
    # Load from the command line or a config file?
    if os.path.exists(G.CONFIG_FILENAME):
        print "* Loading configuration settings from file. (%s)"%G.CONFIG_FILENAME
        args = utils.import_config(G.CONFIG_FILENAME)
    else:
        args = parser.parse_args()
        
    # Are we debugging?
    if args.debug:
        print "* DEBUG Enabled."
        logging.basicConfig(level=logging.DEBUG)
    else:
        try:
            os.makedirs(os.path.dirname(G.LOG_DNS))
        except:
            pass
        logging.basicConfig(filename=G.LOG_DNS,
                             level=logging.INFO)
    
    logger.info("Starting dns server.")
    dns_server = DNSServer(args.dns_ip_addr)

    dns_server.run()
